{
  "declarations": [
    {
      "type": "function",
      "name": "getWorkers",
      "parameters": [
        {}
      ],
      "returnType": "ExecutorService",
      "body": "fun getWorkers(): ExecutorService {val cores = Runtime.getRuntime().availableProcessors()println(\"#cores: $cores\")return Executors.newFixedThreadPool(cores * 8)}"
    }
  ],
  "declarations": [
    {
      "type": "function",
      "name": "solutionUsingAsync",
      "parameters": [
        {}
      ],
      "returnType": "Unit",
      "body": "fun solutionUsingAsync() {val myAsync = MyAsyncFramework()for (text in posts) {myAsync.async({ Server.getToken() }) { token ->Server.submitPost(text, token)}}"
    }
  ],
  "declarations": [
    {
      "type": "function",
      "name": "threadsSolution",
      "parameters": [
        {}
      ],
      "returnType": "Unit",
      "body": "fun threadsSolution() {val threadPool = getWorkers()for (text in posts) {val runnable = Runnable {val token = Server.getToken()val meta = Server.submitPost(text, token)}threadPool.execute(runnable)}threadPool.shutdown()threadPool.awaitTermination(1, TimeUnit.HOURS)println(\"All posts processed\")}"
    }
  ],
  "declarations": [
    {
      "type": "function",
      "name": "fun",
      "parameters": [
        {
          "name": "submitPostNicely",
          "type": "text",
          "name": "String,",
          "type": "token",
          "name": "Server.Token",
          "type": "="
        }
      ],
      "returnType": "Unit",
      "body": "suspend fun submitPostNicely(text: String, token: Server.Token) ="
    }
  ],
  "declarations": [
    {
      "type": "function",
      "name": "coroutinesSolution",
      "parameters": [
        {}
      ],
      "returnType": "Unit",
      "body": "fun coroutinesSolution() {runBlocking {coroutineScope {for (text in posts) {launch(Dispatchers.IO) {val token = suspendCoroutine { it.resume(Server.getToken()) }val meta = submitPostNicely(text, token)// val meta = suspendCoroutine { it.resume(Server.submitPost(text, token)) }}}}}println(\"All posts processed\")}"
    }
  ],
  "declarations": [
    {
      "type": "function",
      "name": "main",
      "parameters": [
        {}
      ],
      "returnType": "Unit",
      "body": "fun main() {val timeThreads = measureTimeMillis {threadsSolution()}println(\"It took ${timeThreads.toDouble() / posts.size} on average\")val timeCoroutines = measureTimeMillis {coroutinesSolution()}println(\"It took ${timeCoroutines.toDouble() / posts.size} on average\")val timeAsync = measureTimeMillis {solutionUsingAsync()}println(\"It took ${timeAsync.toDouble() / posts.size} on average\")}"
    }
  ]
}
